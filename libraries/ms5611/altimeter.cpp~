#include <Arduino.h>
#include <Wire.h>

#include <altimeter.h>

/* to store measures genered by interrupts */
uint32_t d1i;
uint32_t d2i;

/* measure status */
static int interruptCount;
static int measureStep;
static boolean newData;

/* mutex flags */
static boolean locked =  false;
static boolean interruptWait = false;

/* compensated values */
static boolean deviceReset = false;
static uint16_t c1, c2, c3, c4, c5, c6; //PROM factors
static double compensatedTemperature;
static int basePressureCorrectionStep;
static double basePressure;
static double compensatedPressure;


/*********************/
/* measure functions */
/*********************/

/* read 16 bit PROM register */
/* address from 0 to 7 */
uint16_t altimeter_getPROMValue(int address){
  Wire.beginTransmission(MS5611_ADDRESS);
  Wire.write(MS5611_CMD_READ_PROM + (address*2));
  Wire.endTransmission();
  Wire.requestFrom(MS5611_ADDRESS, 2);
  
  uint16_t v = 0;
  while(Wire.available())    // slave may send less than requested
  {
    v <<= 8;
    v = v + (uint16_t)Wire.read();    // receive a byte as character
  }
  return v;
}

/* read 24 bit value */
void altimeter_getDigitalValue(uint32_t& value) {
  Wire.beginTransmission(MS5611_ADDRESS);
  Wire.write(MS5611_CMD_ADC_READ);
  Wire.endTransmission();
  Wire.requestFrom(MS5611_ADDRESS, 3);

  value = 0;
  while(Wire.available()) {
    value <<= 8;
    value += (uint16_t)Wire.read();
  }
}

/* convert D1 */
void altimeter_convertD1() {
  Wire.beginTransmission(MS5611_ADDRESS);
  Wire.write(MS5611_CMD_CONV_D1);
  Wire.endTransmission();
}

/* convert D2 */
void altimeter_convertD2() {
  Wire.beginTransmission(MS5611_ADDRESS);
  Wire.write(MS5611_CMD_CONV_D2);
  Wire.endTransmission();
}

/*  read temp step : read temp and convert pressure */
void altimeter_readTempStep() {

  /* read raw temp */
  altimeter_getDigitalValue(d1i);

  /* convert d2 */
  altimeter_convertD2();
}

/*  read pressure step : read pressure and convert temp */
void altimeter_readPressureStep() {

  /* read raw pressure */
  altimeter_getDigitalValue(d2i);

  /* convert d1 */
  altimeter_convertD1();

  /* now we have new data */
  newData = true;
}


/* altimeter read step */
/* MUST BE DONE AT STABLE FREQUENCY */
/* here using interrupts */
void altimeter_readStep() {

  if( measureStep == MS5611_STEP_READ_TEMP ) {
    altimeter_readTempStep();
    measureStep = MS5611_STEP_READ_PRESSURE;
  } else {
    altimeter_readPressureStep();
    measureStep = MS5611_STEP_READ_TEMP;
  }
}

/*********************************/
/* interrupt and mutex functions */
/*********************************/

/* lock mutex */
void altimeter_lock() {
  locked = true;
}

/* release mutex */
void altimeter_release() {
  locked = false;

  /* check if and interrupt was done between lock and release */ 
  if( interruptWait ) {
    altimeter_readStep(); //the interrupt can't read, do it for it
    interruptWait = false;
  }
}

/* the main interrupt function */
/* read at stable frequency */
ISR(TIMER2_COMPA_vect) {

  /* check time */
  interruptCount++;
  if( interruptCount >= MS5611_INTERRUPT_TIME ) {
    interruptCount = 0;    

    /* if mutex locked, let the main loop do the job when release */
    if( locked ) {
      interruptWait = true;
      return;
    }
    
    /* reenable interrupts for i2c */
    interrupts();

    /* read at stable frequency */
    altimeter_readStep();
  }
}

/* setting timer */
void altimeter_setTimer() {
  noInterrupts();           // disable all interrupts
  TCCR2A = 0;
  TCCR2B = 0;
  TCNT2  = 0;

  TCCR2B |= (1 << WGM22);   // CTC mode
  TCCR2B |= (1 << CS21);    // 64 prescaler
  TCCR2B |= (1 << CS20);
  OCR2A = MS5611_INTERRUPT_COMPARE;
  
  TIMSK2 |= (1 << OCIE2A);  // enable timer compare interrupt
  interrupts();
}


/******************************/
/* altimeter public functions */
/******************************/

/* init */
void altimeter_init() {
  
  /* reset the device if needed */
  if( ! deviceReset ){
    deviceReset = true;
    Wire.beginTransmission(MS5611_ADDRESS);
    Wire.write(MS5611_CMD_RESET);
    Wire.endTransmission();
    delay(MS5611_RESET_DELAY);
    
    c1 = altimeter_getPROMValue(0);
    c2 = altimeter_getPROMValue(1);
    c3 = altimeter_getPROMValue(2);
    c4 = altimeter_getPROMValue(3);
    c5 = altimeter_getPROMValue(4);
    c6 = altimeter_getPROMValue(5);
  }
  
  /* set base pressure */
  basePressureCorrectionStep = 0;
  basePressure = ALTIMETER_BASE_SEA_PRESSURE;

  /* initialize interrupt variables */
  interruptCount = 0;
  measureStep = MS5611_STEP_READ_TEMP;
  newData = false;

  /* convert D1 before starting interrupts */
  altimeter_convertD1();

  /* start interrupts */
  altimeter_setTimer();

  /* delay to stabilize the device */
  delay(MS5611_INTERRUPT_START_DELAY);
}


/* check if we have new data */
boolean altimeter_dataReady(void) {
  return newData;
}

/* update data */
void altimeter_updateData(void) {

  /* lock the mutex to get the values */
  uint32_t d1;
  uint32_t d2;
  altimeter_lock();
  d1 = d1i;
  d2 = d2i;
  newData = false;
  altimeter_release();

  /* compute temperature */
  int32_t dt, temp;
  
  int32_t c5s = c5;
  c5s <<= 8;
  dt = d2 - c5s;

  int32_t c6s = c6;
  c6s *= dt;
  c6s >>= 23;
  
  temp = 2000 + c6s;

  /* compute compensation */
  int64_t off, sens;
  
  /* offset */
  int64_t c2d = c2;
  c2d <<=  16;
  
  int64_t c4d = c4;
  c4d *= dt;
  c4d >>= 7;

  off = c2d + c4d;
 
  /* sens */
  int64_t c1d = c1;
  c1d <<= 15;

  int64_t c3d = c3;
  c3d *= dt;
  c3d >>= 8;
 
  sens = c1d + c3d;

  /* second order compensation */
  int64_t t2, off2, sens2;
 
  if( temp < 2000 ) {
    t2 = dt;
    t2 *= t2;
    t2 >>= 31;
    
    off2 = temp-2000;
    off2 *= off2;
    off2 *= 5;
    sens2 = off2;
    off2 >>= 1;
    sens2 >>= 2;
      
    if( temp < -1500 ){
      int64_t dtemp = temp + 1500;
      dtemp *= dtemp;
      off2 += 7*dtemp;
      dtemp *= 11;
      dtemp >>= 1;
      sens2 += dtemp;
    }
    temp = temp - t2;
    off = off - off2;
    sens = sens - sens2;
  }
  
  /* compute pressure */
  int64_t p;
 
  p = d1 * sens;
  p >>= 21;
  p -= off;
  //p >>= 15 !!! done with doubles, see below

  /* save result */
  compensatedTemperature = (double)temp/100;
  compensatedPressure = ((double)p / (double)32768)/(double)100;  //32768 = 2^15
}

/* return temperature */  
double altimeter_getTemperature() {
  return compensatedTemperature;
}

/* return pressure */
double altimeter_getPressure() {
  return compensatedPressure;
}

/* compute altitude */
double altimeter_getAltitude() {
  double alti;
  alti = pow((compensatedPressure/(basePressure)), 0.1902949572); //0.1902949572 = 1/5.255
  alti = (1-alti)*(288.15/0.0065);
  return alti;
}
    
/* reset the base pressure */
void altimeter_setBasePressureCorrection(int step){
  basePressureCorrectionStep = step;
  basePressure = ALTIMETER_BASE_SEA_PRESSURE * pow(ALTIMETER_PRESSURE_CORRECTION_FACTOR, (double)step);
}

int altimeter_getBasePressureCorrection() {
  return basePressureCorrectionStep;
}
