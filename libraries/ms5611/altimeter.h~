#ifndef ALTIMETER_H
#define ALTIMETER_H

#include <Arduino.h>

#define MS5611_ADDRESS (0x77)
#define MS5611_CMD_RESET (0x1E)
#define MS5611_CMD_READ_PROM (0xA2)
#define MS5611_CMD_CONV_D1 (0x46)
#define MS5611_CMD_CONV_D2 (0x58)
#define MS5611_CMD_ADC_READ (0x00)

#define MS5611_RESET_DELAY 3
#define MS5611_CONV_DELAY 9

#define MS5611_STEP_READ_TEMP 0
#define MS5611_STEP_READ_PRESSURE 1

/* with a 64 prescale, 125 ticks give 0.5 ms */
/* and 17 * 0.5 = 8.5 ms the conv delay */
#define MS5611_INTERRUPT_COMPARE 125
#define MS5611_INTERRUPT_TIME 17
#define MS5611_INTERRUPT_START_DELAY 1000


#define ALTIMETER_BASE_SEA_PRESSURE 1013.25
// 10 meters correction
#define ALTIMETER_PRESSURE_CORRECTION_FACTOR 0.9988151618

/* first init the altimeter */
void altimeter_init();

/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
/* once the variometer is initialized */
/* you can't use i2c anymore without  */
/* locking the variometer             */
/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
void altimeter_lock();
void altimeter_release();

/* when we get data, update temperature, pressure and alti values */
boolean altimeter_dataReady(void);
void altimeter_updateData(void);

/* then get computed values */
double altimeter_getTemperature();
double altimeter_getPressure();
double altimeter_getAltitude();

/* we can change the base pressure */
void altimeter_setBasePressureCorrection(int step);
int altimeter_getBasePressureCorrection();

#endif
