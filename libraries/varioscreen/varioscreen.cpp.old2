#include <varioscreen.h>
#include <Arduino.h>
#include <digit.h>


/*
    void drawPixel(int16_t x, int16_t y, uint16_t color);
    void fillScreen(uint16_t color); // 0x0 black, >0x0 white, to buffer
    void update(void);    // to buffer, may be cropped, drawPixel() used, update needed, old signature kept
    void  drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color);
    // to buffer, may be cropped, drawPixel() used, update needed, new signature, mirror default for example bitmaps
    void  drawBitmap(const uint8_t *bitmap, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color, bool mirror = true);
    // to full screen, filled with white if size is less, no update needed
    void drawBitmap(const uint8_t *bitmap, uint32_t size); 
    void drawBitmap(const uint8_t *bitmap, uint32_t size, bool using_partial_update);
    void eraseDisplay(bool using_partial_update = false);    // partial update
    void updateWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool using_rotation = true);
    // paged drawing, for limited RAM, drawCallback() is called GxGDEP015OC1_PAGES times
    // each call of drawCallback() should draw the same
	virtual void setRotation(uint8_t r);
	virtual void invertDisplay(boolean i);

    drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color),
    drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color),
    fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color),

    drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color),
    drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color),
    fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color),
	fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,int16_t delta, uint16_t color),
    drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color),
    fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color),
    drawRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h,  int16_t radius, uint16_t color),
    fillRoundRect(int16_t x0, int16_t y0, int16_t w, int16_t h,  int16_t radius, uint16_t color),
    drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color),
    drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color, uint16_t bg),
    drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, uint16_t color),
    drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, uint16_t bg),
    drawXBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color),
    drawGrayscaleBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h),
    drawGrayscaleBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w, int16_t h),
    drawGrayscaleBitmap(int16_t x, int16_t y, const uint8_t bitmap[], const uint8_t mask[], int16_t w, int16_t h),
    drawGrayscaleBitmap(int16_t x, int16_t y, uint8_t *bitmap, uint8_t *mask, int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[],   int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y, uint16_t *bitmap,   int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y,  const uint16_t bitmap[], const uint8_t mask[], int16_t w, int16_t h),
    drawRGBBitmap(int16_t x, int16_t y,  uint16_t *bitmap, uint8_t *mask, int16_t w, int16_t h),
    drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size),
    setCursor(int16_t x, int16_t y),
    setTextColor(uint16_t c),
    setTextColor(uint16_t c, uint16_t bg),
    setTextSize(uint8_t s),
    setTextWrap(boolean w),
    cp437(boolean x=true),
    setFont(const GFXfont *f = NULL),
    getTextBounds(char *string, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h),
    getTextBounds(const __FlashStringHelper *s, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h);
	
	size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = DEC);
    size_t print(int, int = DEC);
    size_t print(unsigned int, int = DEC);
    size_t print(long, int = DEC);
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

	
*/
#define VARIOSCREEN_DOT_WIDTH 6
#define VARIOSCREEN_DIGIT_WIDTH 11


/**********/
/* screen */
/**********/

void VarioScreen::begin(void)
{
  init();
  setRotation(4);
  fillScreen(GxEPD_WHITE);
  setTextColor(GxEPD_BLACK);
  updateWindow(0, 0, GxEPD_WIDTH, GxEPD_HEIGHT, false);  
}

/*****************************************/
/*  methods common to all screen objects */
/*****************************************/
#define display_needed() (state & 0x01)
#define display_done() state &= ~(0x01)
#define setDisplayFlag() state |= (0x01)

bool VarioScreenObject::update(void) {

  if( display_needed() ) {
    display();
    display_done();
    return true;
  }

  return false;
}

void VarioScreenObject::reset(void) {
  setDisplayFlag();
}

/* digit */
#define MAX_CHAR_IN_LINE 7

void ScreenDigit::setValue(double value) {

  /* build digit and check changes */
  if( digit.begin(value) ) {
    reset();
  }
}
  

void ScreenDigit::display() {

  /***************/
  /* build digit */
  /***************/

  /* check if digit need to be rebuilded */
  if( ! digit.available() ) {
    digit.rebuild();
  }

  /* to store the characters to be displayed */
//  uint8_t digitCharacters[MAX_CHAR_IN_LINE];
  char digitCharacters[MAX_CHAR_IN_LINE];
  uint8_t digitSize = 0;

  /* compute the total digit width in pixels */
  uint8_t digitWidth = digit.size(VARIOSCREEN_DIGIT_WIDTH, VARIOSCREEN_DIGIT_WIDTH, VARIOSCREEN_DOT_WIDTH);

  /* get characters */
  while( digit.available() ) {
    digitCharacters[digitSize] = digit.get();
    digitSize++;
  }
   
  /*******************/
  /* prepare display */
  /*******************/

  /* number of bytes that need to be deleted *
  uint8_t nullWidth;
  if( digitWidth < lastDisplayWidth ) {
    nullWidth = lastDisplayWidth - digitWidth;
  } else {
    nullWidth = 0;
  }
  lastDisplayWidth = digitWidth;

  /* start position *
  uint8_t posX = anchorX - digitWidth - nullWidth;
  uint8_t posY = anchorY;
  
  /*****************/
  /* start display */
  /*****************/
  
  uint16_t box_x = anchorX;
  uint16_t box_y = anchorY;
  uint16_t box_w = 49;
  uint16_t box_h = 36;
  uint16_t cursor_y = box_y + box_h - 6;
  screen.fillRect(box_x, box_y, box_w, box_h, GxEPD_WHITE);
  screen.setCursor(box_x, cursor_y);
  screen.print(digitCharacters);
  screen.updateWindow(box_x, box_y, box_w, box_h, true);
}

