#ifndef VERTACCEL_H
#define VERTACCEL_H

#include <Arduino.h>

#include <inv_mpu.h>
#include <inv_mpu_dmp_motion_driver.h>

/* eeprom calibration adresses */
#define VERTACCEL_EPROM_TAG 9806
#define VERTACCEL_EPROM_ADDR 0x00

/* accelerometer parameters */
#define VERTACCEL_G_TO_MS 9.80665

#define VERTACCEL_GIRO_FSR 2000
#define VERTACCEL_ACCEL_FSR 4
#define VERTACCEL_FIFO_RATE 100

/* 4G ~= 2^15 */
#define VERTACCEL_ACCEL_SCALE 8192.0


/* 2^30 */
#define VERTACCEL_QUAT_SCALE 1073741824.0


typedef int inv_error_t;
#define INV_SUCCESS 0
#define INV_ERROR 0x20

enum t_axisOrder {
	X_AXIS, // 0
	Y_AXIS, // 1
	Z_AXIS  // 2
};

// Define's passed to update(), to request a specific sensor (or multiple):
#define UPDATE_ACCEL   (1<<1)
#define UPDATE_GYRO    (1<<2)
#define UPDATE_COMPASS (1<<3)
#define UPDATE_TEMP    (1<<4)

#define INT_ACTIVE_HIGH 0
#define INT_ACTIVE_LOW  1
#define INT_LATCHED     1
#define INT_50US_PULSE  0

#define MAX_DMP_SAMPLE_RATE 200 // Maximum sample rate for the DMP FIFO (200Hz)
#define FIFO_BUFFER_SIZE 512 // Max FIFO buffer size

const signed char defaultOrientation[9] = {
	1, 0, 0,
	0, 1, 0,
	0, 0, 1
};
#define ORIENT_PORTRAIT          0
#define ORIENT_LANDSCAPE         1
#define ORIENT_REVERSE_PORTRAIT  2
#define ORIENT_REVERSE_LANDSCAPE 3

/*******************/
/* init the device */
/*******************/
inv_error_t vertaccel_init(boolean giroCalibration = true);

/***********/
/* reading */
/***********/

/* !!! WARNING : run as often as possible to clear the FIFO stack !!! */
boolean vertaccel_dataReady();
boolean vertaccel_rawReady(double* accel, double* upVector, double* vertAccel);

/* when ready update and get data */
void vertaccel_updateData();
double vertaccel_getValue();

/***************/
/* calibration */
/***************/

/* set the calibration vector in EEPROM */
void vertaccel_saveCalibration(double* cal);

/* give the current calibration coefficients */
double* vertaccel_getCalibration(void);

inv_error_t dmpSetFifoRate(unsigned short rate);
inv_error_t dmpEnableFeatures(unsigned short mask);
inv_error_t dmpLoad(void);
unsigned short getAccelSens(void);

unsigned short _aSense;
float _gSense, _mSense;
float getGyroSens(void);
inv_error_t setSensors(unsigned char sensors);


#endif
